[{"C:\\Users\\duc.pt173030\\Desktop\\GDTNND\\tockidotcom\\src\\App.js":"1","C:\\Users\\duc.pt173030\\Desktop\\GDTNND\\tockidotcom\\src\\Components\\Learning.js":"2","C:\\Users\\duc.pt173030\\Desktop\\GDTNND\\tockidotcom\\src\\Components\\Evaluate.js":"3","C:\\Users\\duc.pt173030\\Desktop\\GDTNND\\tockidotcom\\src\\Components\\Competion.js":"4","C:\\Users\\duc.pt173030\\Desktop\\GDTNND\\tockidotcom\\src\\Components\\Practice.js":"5","C:\\Users\\duc.pt173030\\Desktop\\GDTNND\\tockidotcom\\src\\Components\\HomePage.js":"6"},{"size":8489,"mtime":1606983222663,"results":"7","hashOfConfig":"8"},{"size":58282,"mtime":1606984744746,"results":"9","hashOfConfig":"8"},{"size":8129,"mtime":1606982721536,"results":"10","hashOfConfig":"8"},{"size":7593,"mtime":1606981836928,"results":"11","hashOfConfig":"8"},{"size":8195,"mtime":1606983925741,"results":"12","hashOfConfig":"8"},{"size":6012,"mtime":1606983571858,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1wyeo1y",{"filePath":"16","messages":"17","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"18","messages":"19","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\duc.pt173030\\Desktop\\GDTNND\\tockidotcom\\src\\App.js",["28","29","30","31","32"],"C:\\Users\\duc.pt173030\\Desktop\\GDTNND\\tockidotcom\\src\\Components\\Learning.js",["33","34","35","36"],"C:\\Users\\duc.pt173030\\Desktop\\GDTNND\\tockidotcom\\src\\Components\\Evaluate.js",["37","38","39"],"import React, { useState} from 'react';\r\n\r\nimport Card from '@material-ui/core/Card';\r\n\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport { makeStyles, Theme, createStyles} from '@material-ui/core/styles';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport { deepOrange, deepPurple } from '@material-ui/core/colors';\r\n\r\nfunction rand() {\r\n  return Math.round(Math.random() * 20) - 10;\r\n}\r\n\r\nfunction getModalStyle() {\r\n  const top = 50 + rand();\r\n  const left = 50 + rand();\r\n\r\n  return {\r\n    top: `${top}%`,\r\n    left: `${left}%`,\r\n    transform: `translate(-${top}%, -${left}%)`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    position: 'absolute',\r\n    width: 400,\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: '2px solid #000',\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n  orange: {\r\n    color: theme.palette.getContrastText(deepOrange[500]),\r\n    backgroundColor: deepOrange[500],\r\n  },\r\n  purple: {\r\n    color: theme.palette.getContrastText(deepPurple[500]),\r\n    backgroundColor: deepPurple[500],\r\n  },\r\n  root: {\r\n    display: 'flex',\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n    },\r\n    alignItems: 'center',\r\n  },\r\n  cardStyle: {\r\n    marginBottom: 20,\r\n\r\n  },\r\n  button: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  instructions: {\r\n    marginTop: theme.spacing(1),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  evaluateStyle:{\r\n    width:' 100%',\r\n    height: '100%'\r\n  }\r\n}));\r\n\r\nfunction createData(name, calories, fat, carbs, protein) {\r\n  return { name, calories, fat, carbs, protein };\r\n}\r\n\r\nconst rows = [\r\n  createData(1,'Frozen yoghurt','male', 159, \"1/1/2020\"),\r\n  createData(2,'Ice cream sandwich', 'female',237,\"1/1/2020\"),\r\n  createData(3,'Eclair','male', 262, \"1/1/2020\" ),\r\n  createData(4,'Cupcake','female', 305,  \"1/1/2020\" ),\r\n  createData(6,'Gingerbread', 'male',356,  \"1/1/2020\"),\r\n];\r\nconst Evaluate = () => {\r\n  const classes = useStyles();\r\n  // getModalStyle is not a pure function, we roll the style only on the first render\r\n  const [modalStyle] = useState(getModalStyle);\r\n  const [open, setOpen] = useState(false);\r\n  const [evalue, setEvalue] = useState(false);\r\n  const [value, setValue] = useState('female');\r\n \r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleOpenEvalue = () => {\r\n    setEvalue(true);\r\n  };\r\n\r\n  const handleClose=()=> {\r\n    setOpen(false);\r\n  }\r\n\r\n  const handleChange = (event) => {\r\n    setValue(event.target.value);\r\n  };\r\n\r\n  const bodyModal = (\r\n    <div style={modalStyle} className={classes.paper}>\r\n      <h5 id=\"simple-modal-title\">Give us some information</h5>\r\n      <Divider/>\r\n      <div>\r\n        <TextField\r\n          id=\"standard-password-input\"\r\n          label=\"Full name\"\r\n          type=\"text\"\r\n          autoComplete=\"current-password\"\r\n        />\r\n       \r\n      </div>\r\n       <FormControl component=\"fieldset\">\r\n          \r\n          <RadioGroup aria-label=\"gender\" name=\"gender1\" value={value} onChange={handleChange}>\r\n            <FormControlLabel value=\"female\" control={<Radio />} label=\"Female\" />\r\n            <FormControlLabel value=\"male\" control={<Radio />} label=\"Male\" />\r\n            <FormControlLabel value=\"other\" control={<Radio />} label=\"Other\" />\r\n          </RadioGroup>\r\n      </FormControl>\r\n      <Typography id=\"discrete-slider-small-steps\" gutterBottom>\r\n        Choose Level\r\n      </Typography>\r\n      <Slider\r\n        defaultValue={0.00000005}\r\n        \r\n        aria-labelledby=\"discrete-slider-small-steps\"\r\n        step={1}\r\n        marks\r\n        min={0}\r\n        max={5}\r\n        valueLabelDisplay=\"auto\"\r\n      />\r\n     \r\n      <Button size=\"small\" color=\"danger\" onClick={handleClose}>\r\n        Back\r\n      </Button>\r\n      <Button size=\"small\" variant=\"outlined\" color=\"secondary\" onClick={handleOpenEvalue}>\r\n        GO\r\n      </Button>\r\n    </div>\r\n  );\r\n  const evaluateModal =(\r\n    <div style={modalStyle}>\r\n      <p>kkkkk</p>\r\n    </div>\r\n\r\n  );\r\n    return (\r\n      <div class=\"row\">\r\n        <div class= \"col-sm-7\">\r\n          <div style={{marginLeft: 30, marginRight: 30}}>\r\n            <Card className={classes.cardStyle} >\r\n              <CardContent>\r\n                <CardMedia\r\n                  image=\"/static/images/cards/contemplative-reptile.jpg\"\r\n                  title=\"Contemplative Reptile\"\r\n                />\r\n                <CardContent>\r\n                  <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                    Đánh giá tốc độ\r\n                  </Typography>\r\n                </CardContent> \r\n                <Button size=\"small\" variant=\"outlined\" color=\"primary\" onClick={handleOpen}>\r\n                  Open\r\n                </Button>\r\n                \r\n              </CardContent>\r\n             \r\n            </Card>\r\n            \r\n            <Card className={classes.cardStyle}>\r\n            <CardContent>\r\n                <CardMedia\r\n                  image=\"/static/images/cards/contemplative-reptile.jpg\"\r\n                  title=\"Contemplative Reptile\"\r\n                />\r\n                <CardContent>\r\n                  <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                    Đánh giá theo thời gian\r\n                  </Typography>\r\n                </CardContent> \r\n                <Button size=\"small\" variant=\"outlined\" color=\"primary\" onClick={handleOpen}>\r\n                  Open\r\n                </Button>\r\n                </CardContent>\r\n             \r\n            </Card>\r\n          </div>\r\n\r\n        \r\n        </div>\r\n        <Modal\r\n            open={open}\r\n            onClose={handleClose}\r\n            aria-labelledby=\"simple-modal-title\"\r\n            aria-describedby=\"simple-modal-description\"\r\n          >\r\n          {bodyModal}\r\n          </Modal>\r\n        <Modal>\r\n          {evaluateModal}\r\n        </Modal>\r\n\r\n\r\n        <div class=\"col-sm-5\" >\r\n          <h3>Bảng xếp hạng</h3>\r\n        <TableContainer component={Paper} style={{backgroundColor: \"#ccc\"}}>\r\n          <Table  aria-label=\"collapsible table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>No</TableCell>\r\n                <TableCell align=\"center\">Name</TableCell>\r\n                <TableCell align=\"center\">Gender</TableCell>\r\n                <TableCell align=\"center\">Point</TableCell>\r\n                <TableCell align=\"center\">Time</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {rows.map((row) => (\r\n                <TableRow key={row.name}>\r\n                  <TableCell>{row.name}</TableCell>\r\n                  <TableCell className={classes.root}><Avatar className={classes.orange}>N</Avatar>{row.calories}</TableCell>\r\n                  <TableCell align=\"center\">{row.fat}</TableCell>\r\n                  <TableCell align=\"center\">{row.carbs}</TableCell>\r\n                  <TableCell align=\"center\">{row.protein}</TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n\r\n        </div>\r\n\r\n   </div>\r\n      \r\n    );\r\n\r\n}\r\n\r\nexport default Evaluate;\r\n",["40","41"],"C:\\Users\\duc.pt173030\\Desktop\\GDTNND\\tockidotcom\\src\\Components\\Competion.js",[],"C:\\Users\\duc.pt173030\\Desktop\\GDTNND\\tockidotcom\\src\\Components\\Practice.js",[],"C:\\Users\\duc.pt173030\\Desktop\\GDTNND\\tockidotcom\\src\\Components\\HomePage.js",["42","43","44"],{"ruleId":"45","severity":1,"message":"46","line":2,"column":27,"nodeType":"47","messageId":"48","endLine":2,"endColumn":33},{"ruleId":"45","severity":1,"message":"49","line":36,"column":8,"nodeType":"47","messageId":"48","endLine":36,"endColumn":20},{"ruleId":"45","severity":1,"message":"50","line":37,"column":8,"nodeType":"47","messageId":"48","endLine":37,"endColumn":23},{"ruleId":"45","severity":1,"message":"51","line":38,"column":8,"nodeType":"47","messageId":"48","endLine":38,"endColumn":25},{"ruleId":"45","severity":1,"message":"52","line":39,"column":8,"nodeType":"47","messageId":"48","endLine":39,"endColumn":21},{"ruleId":"45","severity":1,"message":"53","line":10,"column":8,"nodeType":"47","messageId":"48","endLine":10,"endColumn":12},{"ruleId":"45","severity":1,"message":"54","line":11,"column":8,"nodeType":"47","messageId":"48","endLine":11,"endColumn":11},{"ruleId":"45","severity":1,"message":"55","line":125,"column":9,"nodeType":"47","messageId":"48","endLine":125,"endColumn":27},{"ruleId":"45","severity":1,"message":"56","line":130,"column":9,"nodeType":"47","messageId":"48","endLine":130,"endColumn":13},{"ruleId":"45","severity":1,"message":"57","line":10,"column":22,"nodeType":"47","messageId":"48","endLine":10,"endColumn":27},{"ruleId":"45","severity":1,"message":"58","line":10,"column":29,"nodeType":"47","messageId":"48","endLine":10,"endColumn":41},{"ruleId":"45","severity":1,"message":"59","line":101,"column":10,"nodeType":"47","messageId":"48","endLine":101,"endColumn":16},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"45","severity":1,"message":"46","line":6,"column":27,"nodeType":"47","messageId":"48","endLine":6,"endColumn":33},{"ruleId":"45","severity":1,"message":"64","line":6,"column":35,"nodeType":"47","messageId":"48","endLine":6,"endColumn":41},{"ruleId":"45","severity":1,"message":"65","line":6,"column":43,"nodeType":"47","messageId":"48","endLine":6,"endColumn":48},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'KeyboardIcon' is defined but never used.","'DoubleArrowIcon' is defined but never used.","'SportsKabaddiIcon' is defined but never used.","'EqualizerIcon' is defined but never used.","'Zoom' is defined but never used.","'Fab' is defined but never used.","'transitionDuration' is assigned a value but never used.","'fabs' is assigned a value but never used.","'Theme' is defined but never used.","'createStyles' is defined but never used.","'evalue' is assigned a value but never used.","no-native-reassign",["66"],"no-negated-in-lhs",["67"],"'Switch' is defined but never used.","'Route' is defined but never used.","no-global-assign","no-unsafe-negation"]