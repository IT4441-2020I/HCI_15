[{"C:\\Users\\duc.pt173030\\Desktop\\GDTNND\\tockidotcom\\src\\App.js":"1","C:\\Users\\duc.pt173030\\Desktop\\GDTNND\\tockidotcom\\src\\Components\\Learning.js":"2","C:\\Users\\duc.pt173030\\Desktop\\GDTNND\\tockidotcom\\src\\Components\\Competion.js":"3","C:\\Users\\duc.pt173030\\Desktop\\GDTNND\\tockidotcom\\src\\Components\\History.js":"4","C:\\Users\\duc.pt173030\\Desktop\\GDTNND\\tockidotcom\\src\\Components\\Evaluate.js":"5","C:\\Users\\duc.pt173030\\Desktop\\GDTNND\\tockidotcom\\src\\Components\\HomePage.js":"6","C:\\Users\\duc.pt173030\\Desktop\\GDTNND\\tockidotcom\\src\\Components\\Battle.js":"7"},{"size":8241,"mtime":1607337866638,"results":"8","hashOfConfig":"9"},{"size":62909,"mtime":1607344435305,"results":"10","hashOfConfig":"9"},{"size":7593,"mtime":1607343715037,"results":"11","hashOfConfig":"9"},{"size":6630,"mtime":1607343054635,"results":"12","hashOfConfig":"9"},{"size":8823,"mtime":1607344261614,"results":"13","hashOfConfig":"9"},{"size":6012,"mtime":1606983571858,"results":"14","hashOfConfig":"9"},{"size":7553,"mtime":1607343396697,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1wyeo1y",{"filePath":"18","messages":"19","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},"C:\\Users\\duc.pt173030\\Desktop\\GDTNND\\tockidotcom\\src\\App.js",["32"],"C:\\Users\\duc.pt173030\\Desktop\\GDTNND\\tockidotcom\\src\\Components\\Learning.js",["33","34","35","36","37"],"C:\\Users\\duc.pt173030\\Desktop\\GDTNND\\tockidotcom\\src\\Components\\Competion.js",[],"C:\\Users\\duc.pt173030\\Desktop\\GDTNND\\tockidotcom\\src\\Components\\History.js",[],"C:\\Users\\duc.pt173030\\Desktop\\GDTNND\\tockidotcom\\src\\Components\\Evaluate.js",["38","39","40"],"import React, { useState } from \"react\";\r\n\r\nimport Card from \"@material-ui/core/Card\";\r\n\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport { deepOrange, deepPurple } from \"@material-ui/core/colors\";\r\nfunction rand() {\r\n  return Math.round(Math.random() * 20) - 10;\r\n}\r\n\r\nfunction getModalStyle() {\r\n  const top = 50 + rand();\r\n  const left = 50 + rand();\r\n\r\n  return {\r\n    top: `${top}%`,\r\n    left: `${left}%`,\r\n    transform: `translate(-${top}%, -${left}%)`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    position: \"absolute\",\r\n    width: 400,\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: \"2px solid #000\",\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n  orange: {\r\n    color: theme.palette.getContrastText(deepOrange[500]),\r\n    backgroundColor: deepOrange[500],\r\n  },\r\n  purple: {\r\n    color: theme.palette.getContrastText(deepPurple[500]),\r\n    backgroundColor: deepPurple[500],\r\n  },\r\n  root: {\r\n    display: \"flex\",\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n    alignItems: \"center\",\r\n  },\r\n  cardStyle: {\r\n    marginBottom: 20,\r\n  },\r\n  button: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  instructions: {\r\n    marginTop: theme.spacing(1),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  evaluateStyle: {\r\n    width: \" 100%\",\r\n    height: \"100%\",\r\n  },\r\n}));\r\n\r\nfunction createData(name, calories, fat, carbs, protein) {\r\n  return { name, calories, fat, carbs, protein };\r\n}\r\n\r\nconst rows = [\r\n  createData(1, \"Frozen yoghurt\", \"male\", 159, \"1/1/2020\"),\r\n  createData(2, \"Ice cream sandwich\", \"female\", 237, \"1/1/2020\"),\r\n  createData(3, \"Eclair\", \"male\", 262, \"1/1/2020\"),\r\n  createData(4, \"Cupcake\", \"female\", 305, \"1/1/2020\"),\r\n  createData(6, \"Gingerbread\", \"male\", 356, \"1/1/2020\"),\r\n];\r\nconst Evaluate = () => {\r\n  const classes = useStyles();\r\n  // getModalStyle is not a pure function, we roll the style only on the first render\r\n  const [modalStyle] = useState(getModalStyle);\r\n  const [open, setOpen] = useState(false);\r\n  const [evalue, setEvalue] = useState(false);\r\n  const [value, setValue] = useState(\"female\");\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleOpenEvalue = () => {\r\n    setEvalue(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    setValue(event.target.value);\r\n  };\r\n\r\n  const bodyModal = (\r\n    <div style={modalStyle} className={classes.paper}>\r\n      <h5 id=\"simple-modal-title\">Give us some information</h5>\r\n      <Divider />\r\n      <div>\r\n        <TextField\r\n          id=\"standard-password-input\"\r\n          label=\"Full name\"\r\n          type=\"text\"\r\n          autoComplete=\"current-password\"\r\n        />\r\n      </div>\r\n      <FormControl component=\"fieldset\">\r\n        <RadioGroup\r\n          aria-label=\"gender\"\r\n          name=\"gender1\"\r\n          value={value}\r\n          onChange={handleChange}\r\n        >\r\n          <FormControlLabel value=\"female\" control={<Radio />} label=\"Female\" />\r\n          <FormControlLabel value=\"male\" control={<Radio />} label=\"Male\" />\r\n          <FormControlLabel value=\"other\" control={<Radio />} label=\"Other\" />\r\n        </RadioGroup>\r\n      </FormControl>\r\n      <Typography id=\"discrete-slider-small-steps\" gutterBottom>\r\n        Choose Level\r\n      </Typography>\r\n      <Slider\r\n        defaultValue={0.00000005}\r\n        aria-labelledby=\"discrete-slider-small-steps\"\r\n        step={1}\r\n        marks\r\n        min={0}\r\n        max={5}\r\n        valueLabelDisplay=\"auto\"\r\n      />\r\n\r\n      <Button size=\"small\" color=\"danger\" onClick={handleClose}>\r\n        Back\r\n      </Button>\r\n      <Button\r\n        size=\"small\"\r\n        variant=\"outlined\"\r\n        color=\"secondary\"\r\n        onClick={handleOpenEvalue}\r\n      >\r\n        GO\r\n      </Button>\r\n    </div>\r\n  );\r\n  const evaluateModal = (\r\n    <div style={modalStyle}>\r\n      <p>kkkkk</p>\r\n    </div>\r\n  );\r\n  return (\r\n    <Card>\r\n      <CardContent>\r\n        <div class=\"row\">\r\n          <div class=\"col-sm-7\">\r\n            <div style={{ marginLeft: 30, marginRight: 30 }}>\r\n            <h3>Đánh giá</h3>\r\n              <Card className={classes.cardStyle}>\r\n              \r\n                <CardContent>\r\n                  <CardMedia\r\n                    image=\"/static/images/cards/contemplative-reptile.jpg\"\r\n                    title=\"Contemplative Reptile\"\r\n                  />\r\n                  <CardContent>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                      Đánh giá tốc độ\r\n                    </Typography>\r\n                  </CardContent>\r\n                  <Button\r\n                    size=\"small\"\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    onClick={handleOpen}\r\n                  >\r\n                    Open\r\n                  </Button>\r\n                </CardContent>\r\n              </Card>\r\n\r\n              <Card className={classes.cardStyle}>\r\n                <CardContent>\r\n                  <CardMedia\r\n                    image=\"/static/images/cards/contemplative-reptile.jpg\"\r\n                    title=\"Contemplative Reptile\"\r\n                  />\r\n                  <CardContent>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                      Đánh giá theo thời gian\r\n                    </Typography>\r\n                  </CardContent>\r\n                  <Button\r\n                    size=\"small\"\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    onClick={handleOpen}\r\n                  >\r\n                    Open\r\n                  </Button>\r\n                </CardContent>\r\n              </Card>\r\n            </div>\r\n          </div>\r\n          <Modal\r\n            open={open}\r\n            onClose={handleClose}\r\n            aria-labelledby=\"simple-modal-title\"\r\n            aria-describedby=\"simple-modal-description\"\r\n          >\r\n            {bodyModal}\r\n          </Modal>\r\n          <Modal>{evaluateModal}</Modal>\r\n\r\n          <div class=\"col-sm-5\">\r\n            <h3>Bảng xếp hạng</h3>\r\n            <TableContainer\r\n              component={Paper}\r\n            >\r\n              <Table aria-label=\"collapsible table\">\r\n                <TableHead style={{backgroundColor:\"rgb(63, 81, 181)\"}}>\r\n                  <TableRow>\r\n                    <TableCell style={{color:\"white\"}}>No</TableCell>\r\n                    <TableCell style={{color:\"white\"}} align=\"center\">Name</TableCell>\r\n                    <TableCell style={{color:\"white\"}}  align=\"center\">Gender</TableCell>\r\n                    <TableCell style={{color:\"white\"}} align=\"center\">Point</TableCell>\r\n                    <TableCell style={{color:\"white\"}} align=\"center\">Time</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {rows.map((row) => (\r\n                    <TableRow key={row.name}>\r\n                      <TableCell>{row.name}</TableCell>\r\n                      <TableCell className={classes.root}>\r\n                        <Avatar className={classes.orange}>N</Avatar>\r\n                        {row.calories}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">{row.fat}</TableCell>\r\n                      <TableCell align=\"center\">{row.carbs}</TableCell>\r\n                      <TableCell align=\"center\">{row.protein}</TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Evaluate;\r\n","C:\\Users\\duc.pt173030\\Desktop\\GDTNND\\tockidotcom\\src\\Components\\HomePage.js",["41","42","43"],"C:\\Users\\duc.pt173030\\Desktop\\GDTNND\\tockidotcom\\src\\Components\\Battle.js",["44","45","46"],"import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport PersonIcon from \"@material-ui/icons/Person\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport ArrowRightIcon from \"@material-ui/icons/ArrowRight\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport {\r\n  Button,\r\n  Checkbox,\r\n  Container,\r\n  FormControlLabel,\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  TextField,\r\n  withStyles,\r\n} from \"@material-ui/core\";\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.common.white,\r\n    color: theme.palette.common.black,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    \"&:nth-of-type(odd)\": {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\nfunction createData(id, participants, tests_taken, time_left) {\r\n  return { id, participants, tests_taken, time_left };\r\n}\r\n\r\nconst rows = [\r\n  createData(\"12315641\", 34, 54, \"12m\"),\r\n  createData(\"75615462\", 18, 37, \"17m\"),\r\n  createData(\"21564321\", 140, 320, \"1h\"),\r\n  createData(\"21542316\", 6, 12, \"1h\"),\r\n  createData(\"13154564\", 66, 139, \"2h\"),\r\n];\r\n\r\nconst useStyles1 = makeStyles(() => ({\r\n  table: {\r\n    minWidth: 700,\r\n  },\r\n}));\r\nfunction CustomizedTables() {\r\n  const classes = useStyles1();\r\n\r\n  return (\r\n    <Card>\r\n      <CardContent>\r\n        <TableContainer component={Paper}>\r\n          <Table className={classes.table} aria-label=\"customized table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <StyledTableCell></StyledTableCell>\r\n                <StyledTableCell align=\"right\">\r\n                  Số người tham gia\r\n                </StyledTableCell>\r\n                <StyledTableCell align=\"right\">\r\n                  Số lượng kiểm tra đã thực hiện\r\n                </StyledTableCell>\r\n                <StyledTableCell align=\"right\">\r\n                  Thời gian còn lại\r\n                </StyledTableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {rows.map((row) => (\r\n                <StyledTableRow key={row.id}>\r\n                  <StyledTableCell component=\"th\" scope=\"row\">\r\n                    {row.id}\r\n                    <Link to=\"competition\">\r\n                      <Button\r\n                        variant=\"outlined\"\r\n                        color=\"white\"\r\n                        className={classes.button}\r\n                        startIcon={<ArrowRightIcon />}\r\n                        size=\"small\"\r\n                        style={{ marginLeft: \"10px\" }}\r\n                      >\r\n                        Tham gia\r\n                      </Button>\r\n                    </Link>\r\n                  </StyledTableCell>\r\n\r\n                  <StyledTableCell align=\"right\">\r\n                    {row.participants}\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align=\"right\">\r\n                    {row.tests_taken}\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align=\"right\">\r\n                    {row.time_left}\r\n                  </StyledTableCell>\r\n                </StyledTableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\nconst times = [\r\n  {\r\n    value: \"0\",\r\n    label: \"30 phút\",\r\n  },\r\n  {\r\n    value: \"1\",\r\n    label: \"1 giờ\",\r\n  },\r\n  {\r\n    value: \"2\",\r\n    label: \"3 giờ\",\r\n  },\r\n  {\r\n    value: \"3\",\r\n    label: \"12 giờ\",\r\n  },\r\n  {\r\n    value: \"4\",\r\n    label: \"1 ngày\",\r\n  },\r\n];\r\nfunction SelectTextField(props) {\r\n  //console.log(props.orderStatusValue);\r\n  const [time, setTime] = React.useState(\"0\");\r\n\r\n  const handleChange = (event) => {\r\n    setTime(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <TextField\r\n        id=\"standard-select-currency-native\"\r\n        select\r\n        value={time}\r\n        fullWidth\r\n        onChange={handleChange}\r\n        SelectProps={{\r\n          native: true,\r\n        }}\r\n      >\r\n        {times.map((option) => (\r\n          <option key={option.value} value={option.value}>\r\n            {option.label}\r\n          </option>\r\n        ))}\r\n      </TextField>\r\n    </div>\r\n  );\r\n}\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`simple-tabpanel-${index}`}\r\n      aria-labelledby={`simple-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={3}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `simple-tab-${index}`,\r\n    \"aria-controls\": `simple-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n}));\r\nfunction SimpleTabs() {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\" color=\"default\">\r\n        <Tabs\r\n          value={value}\r\n          onChange={handleChange}\r\n          aria-label=\"simple tabs example\"\r\n          variant=\"fullWidth\"\r\n        >\r\n          <Tab icon={<PersonIcon />} label=\"Tham gia\" {...a11yProps(0)} />\r\n          <Tab icon={<AddIcon />} label=\"Tạo mới\" {...a11yProps(1)} />\r\n        </Tabs>\r\n      </AppBar>\r\n      <TabPanel value={value} index={0}>\r\n        <CustomizedTables />\r\n      </TabPanel>\r\n      <TabPanel value={value} index={1}>\r\n        <Container maxWidth=\"sm\">\r\n          <Box\r\n            bgcolor=\"white\"\r\n            boxShadow=\"2\"\r\n            borderRadius=\"15px\"\r\n            p=\"8px\"\r\n            mt=\"0px\"\r\n          >\r\n            <Typography\r\n              variant=\"subtitle2\"\r\n              display=\"block\"\r\n              gutterBottom\r\n              style={{ textAlign: \"left\", marginTop: 10 }}\r\n            >\r\n              Thời gian\r\n            </Typography>\r\n            <SelectTextField />\r\n            <FormControlLabel\r\n              control={<Checkbox />}\r\n              label=\"Tạo một cuộc thi riêng\"\r\n              fullWidth\r\n            />\r\n            <br />\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              className={classes.button}\r\n              startIcon={<AddIcon />}\r\n              style={{ marginLeft: \"170px\", marginTop: \"15px\" }}\r\n            >\r\n              Bắt đầu cuộc thi\r\n            </Button>\r\n          </Box>\r\n        </Container>\r\n      </TabPanel>\r\n    </div>\r\n  );\r\n}\r\n\r\nclass Battle extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <SimpleTabs />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Battle;\r\n",{"ruleId":"47","severity":1,"message":"48","line":2,"column":27,"nodeType":"49","messageId":"50","endLine":2,"endColumn":33},{"ruleId":"47","severity":1,"message":"51","line":10,"column":8,"nodeType":"49","messageId":"50","endLine":10,"endColumn":12},{"ruleId":"47","severity":1,"message":"52","line":11,"column":8,"nodeType":"49","messageId":"50","endLine":11,"endColumn":11},{"ruleId":"47","severity":1,"message":"53","line":28,"column":8,"nodeType":"49","messageId":"50","endLine":28,"endColumn":19},{"ruleId":"47","severity":1,"message":"54","line":126,"column":9,"nodeType":"49","messageId":"50","endLine":126,"endColumn":27},{"ruleId":"47","severity":1,"message":"55","line":131,"column":9,"nodeType":"49","messageId":"50","endLine":131,"endColumn":13},{"ruleId":"47","severity":1,"message":"56","line":10,"column":22,"nodeType":"49","messageId":"50","endLine":10,"endColumn":27},{"ruleId":"47","severity":1,"message":"57","line":10,"column":29,"nodeType":"49","messageId":"50","endLine":10,"endColumn":41},{"ruleId":"47","severity":1,"message":"58","line":99,"column":10,"nodeType":"49","messageId":"50","endLine":99,"endColumn":16},{"ruleId":"47","severity":1,"message":"48","line":6,"column":27,"nodeType":"49","messageId":"50","endLine":6,"endColumn":33},{"ruleId":"47","severity":1,"message":"59","line":6,"column":35,"nodeType":"49","messageId":"50","endLine":6,"endColumn":41},{"ruleId":"47","severity":1,"message":"60","line":6,"column":43,"nodeType":"49","messageId":"50","endLine":6,"endColumn":48},{"ruleId":"47","severity":1,"message":"48","line":12,"column":27,"nodeType":"49","messageId":"50","endLine":12,"endColumn":33},{"ruleId":"47","severity":1,"message":"59","line":12,"column":35,"nodeType":"49","messageId":"50","endLine":12,"endColumn":41},{"ruleId":"47","severity":1,"message":"60","line":12,"column":43,"nodeType":"49","messageId":"50","endLine":12,"endColumn":48},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Zoom' is defined but never used.","'Fab' is defined but never used.","'CardContent' is defined but never used.","'transitionDuration' is assigned a value but never used.","'fabs' is assigned a value but never used.","'Theme' is defined but never used.","'createStyles' is defined but never used.","'evalue' is assigned a value but never used.","'Switch' is defined but never used.","'Route' is defined but never used."]